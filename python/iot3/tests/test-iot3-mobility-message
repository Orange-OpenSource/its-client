#!/usr/bin/env python3

import json
import math
import time
import iot3.mobility
from iot3.mobility.etsi import Message
from iot3.mobility.cam import CAM
from iot3.mobility.cpm import CPM
from iot3.mobility.denm import DENM
from iot3.mobility.gnss import GNSSReport


print("CAM with nothing available...")
msg = CAM(
    uuid="test_1234",
    gnss_report=GNSSReport(),
)
assert msg["message"]["basic_container"]["reference_position"]["latitude"] == 900000001
assert (
    msg["message"]["basic_container"]["reference_position"]["longitude"] == 1800000001
)

print("CAM with latitude and longitude...")
msg = CAM(
    uuid="test_1234",
    gnss_report=GNSSReport(
        latitude=43.635212,
        longitude=1.374562,
    ),
)
# Check with direct access to message structure (ETSI values)
assert msg["message"]["basic_container"]["reference_position"]["latitude"] == 436352120
assert msg["message"]["basic_container"]["reference_position"]["longitude"] == 13745620
# Check with properties (SI values, degrees); ~6mm at Equator on surface of Earth
assert math.fabs(msg.latitude - 43.6352120) < 5 * 10 ** -8
assert math.fabs(msg.longitude - 1.3745620) < 5 * 10 ** -8

print("CAM serialisation...")
json_msg = msg.to_json()

print("CAM de-serialisation...")
msg = iot3.mobility.message_from_json(msg_json=json_msg)
assert msg.msg_type == "cam"
assert math.fabs(msg.latitude - 43.6352120) < 5 * 10 ** -8
assert math.fabs(msg.longitude - 1.3745620) < 5 * 10 ** -8

print("CPM with no P.O...")
msg = CPM(
    uuid="test_1234",
    gnss_report=GNSSReport(
        latitude=43.635212,
        longitude=1.374562,
    ),
)
assert "station_data_container" not in msg["message"]
assert len(msg["message"]["perceived_object_container"]) == 0

#-----------------------------------------------------------------------------------------
print("CPM of a car with some P.O...")
msg = CPM(
    uuid="test_1234",
    station_type=Message.StationType.passengerCar,
    gnss_report=GNSSReport(
        latitude=43.635212,
        longitude=1.374562,
    ),
    perceived_objects=[
        CPM.PerceivedObject(
            object_id= 27,
            measurement_delta_time=0.128,
            x_distance= 12,
            y_distance= -16,
            object_age= 127,
        ),
        CPM.PerceivedObject(
            object_id= 42,
            measurement_delta_time=-1.640,
            x_distance= 63,
            y_distance= -32,
            object_age= 255,
            quality=7,
        ),
    ],
)
assert "originating_vehicle_container" in msg["message"]
assert len(msg["message"]["perceived_object_container"]) == 2

print("CPM with a new P.O...")
msg.add_perceived_object(
    perceived_object=CPM.PerceivedObject(
        object_id= 12,
        measurement_delta_time=1.280,
        x_distance= 1,
        y_distance= -2,
        object_age= 3,
        quality=15,
        object_class=CPM.PerceivedObject.Vehicle.motorcycle,
        object_class_confidence=50,
    ),
)
assert len(msg["message"]["perceived_object_container"]) == 3

print("CPM iteration of P.O...")
count = 0
for po in msg.perceived_objects:
    assert type(po) is CPM.PerceivedObject
    count += 1
assert count == 3
assert po.quality == 15
assert po.object_class["vehicle"] == Message.StationType.motorcycle
assert po.object_class_confidence == 50

print("CPM serialisation...")
json_msg = msg.to_json()

print("CPM deserialisation...")
msg = iot3.mobility.message_from_json(msg_json=json_msg)
assert msg.msg_type == "cpm"
assert msg["message"]["management_container"]["station_type"] == Message.StationType.passengerCar
assert len(msg["message"]["perceived_object_container"]) == 3
assert po.object_class["vehicle"] == Message.StationType.motorcycle

#-----------------------------------------------------------------------------------------
print("DENM with nothing set...")
msg = DENM(
    uuid="test_1234",
    gnss_report=GNSSReport(),
)

print("DENM with latitude, longitude, and cause...")
detect_time = time.time()
msg = DENM(
    uuid="test_1234",
    gnss_report=GNSSReport(
        latitude=43.635212,
        longitude=1.374562,
    ),
    cause=DENM.Cause.trafficCondition,
)
# UNIX time is a float that encodes seconds, while ETSI time is an int that
# encodes miliseconds, so we should not have a delta of 1ms or more
assert math.fabs(detect_time - msg.detection_time) < 10 ** -3

seq_num = msg.sequence_number
detect_time = msg.detection_time

print("DENM continuation (update)...")
msg = DENM(
    uuid="test_1234",
    gnss_report=GNSSReport(
        latitude=43.635212,
        longitude=1.374562,
    ),
    detection_time=detect_time,
    cause=DENM.Cause.trafficCondition,
    sequence_number=seq_num,
)
msg.subcause = DENM.SubCause.TrafficCondition.trafficStationary
assert seq_num == msg.sequence_number
assert msg.cause == DENM.Cause.trafficCondition
assert msg.subcause == DENM.SubCause.TrafficCondition.trafficStationary
# UNIX time: seconds as a float, ETSI time: ms as an int; => delta max = 1ms
assert math.fabs(detect_time - msg.detection_time) < 10 ** -3

print("DENM update with invalid subcause...")
try:
    msg.subcause = DENM.SubCause.WrongWayDriving.wrongDirection
except ValueError:
    pass
else:
    raise RuntimeError("Invalid subcause should not be allowed")

print("New DENM sith invalid subcause...")
try:
    DENM(
        uuid="test_1234",
        gnss_report=GNSSReport(
            latitude=43.635212,
            longitude=1.374562,
        ),
        detection_time=detect_time,
        cause=DENM.Cause.trafficCondition,
        subcause=DENM.SubCause.WrongWayDriving.wrongDirection,
    )
except ValueError:
    pass
else:
    raise RuntimeError("Invalid subcause should not be allowed")

print("DENM continuation (update without subcause)...")
msg.subcause = None
assert msg.subcause == None
assert "subcause" not in msg["message"]["situation_container"]["event_type"]

print("DENM continuation (termination)...")
msg = DENM(
    uuid="test_1234",
    gnss_report=GNSSReport(),
    detection_time=detect_time,
    termination=DENM.TerminationType.isNegation,
    sequence_number=seq_num,
)
assert msg.termination == DENM.TerminationType.isNegation

print("DENM serialisation...")
json_msg = msg.to_json()

print("DENM de-serialisation...")
msg = iot3.mobility.message_from_json(msg_json=json_msg)
assert msg.msg_type == "denm"
assert seq_num == msg.sequence_number
assert msg.termination == DENM.TerminationType.isNegation
# UNIX time: seconds as a float, ETSI time: ms as an int; => delta max = 1ms
assert math.fabs(detect_time - msg.detection_time) < 10 ** -3

#-----------------------------------------------------------------------------------------
print("Invalid generic message...")
try:
    msg = Message()
except TypeError:
    pass
else:
    raise RuntimeError("Generic message should not be allowed")

print("De-serialisation of unrecognised message...")
try:
    msg = iot3.mobility.message_from_json(msg_json='""')
except RuntimeError:
    pass
else:
    raise RuntimeError("Deserialisation of unrecognised message should not succeed...")

print("De-serialisation of broken message...")
try:
    msg = iot3.mobility.message_from_json(msg_json=json_msg[:-1])
except RuntimeError:
    pass
else:
    raise RuntimeError("Deserialisation of broken message should not succeed...")
